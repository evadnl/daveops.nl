[ { "title": "Virtualenv commands cheat sheet", "url": "/posts/Virtualenv_commands_cheat_sheet/", "categories": "", "tags": "python, virtualenv, cheatsheet", "date": "2023-01-05 00:00:00 +0100", "snippet": "Why virtual environments while using Python?Python versions or packages change over time and this could break your code, ansible playbooks, molecule tests etcera. I ran into this when I began using Ansible, where the path to the old Python executable was gone due to an upgrade on my OS level. This is the global level. Using virtualenv removes this issue due to it being set to a specific location when setting up the virtualenv.Package install$ pip install virtualenvInstalls the virtualenv package.CommandsCreate a new virtual environment. Make sure you are a proper working directory, i like to use ~/code/virtual_environments/.$ virtualenv [projectname]Enter the actual project so you can start installing packages with pip. or use source instead of . (. is source)$ . [projectname]/bin/activate$ source [projectname]/bin/activateExit the virtualenv while inside one.$ deactivateWhile inside the virtualenv make an export of all installed packages.$ pip freeze -l &amp;gt; requirements.txtWhy the -l? If the virtualenv has access to the global packages it is not listing the globally installed packages.Use the requirements.txt to setup your virtualenv.$ pip install -r requirements.txtThis should get you started pretty quickly with Python virtualenv." }, { "title": "Molecule Ansible testing systemd not working in Docker for Desktop Mac M1", "url": "/posts/Molecule_ansible_testing_systemd_not_found/", "categories": "", "tags": "molecule, ansible, mac, m1, systemd, D-Bus", "date": "2022-06-30 00:00:00 +0200", "snippet": "Failed to get D-Bus connection: No such file or directoryWhen I was running my playbook/role tests within Molecule, using the ansible service module I was greeted by the following error:fatal: [instance]: FAILED! =&amp;gt; {&quot;changed&quot;: false, &quot;cmd&quot;: &quot;/usr/bin/systemctl&quot;, &quot;msg&quot;: &quot;Failed to get D-Bus connection: No such file or directory&quot;, &quot;rc&quot;: 1, &quot;stderr&quot;: &quot;Failed to get D-Bus connection: No such file or directory\\n&quot;, &quot;stderr_lines&quot;: [&quot;Failed to get D-Bus connection: No such file or directory&quot;], &quot;stdout&quot;: &quot;&quot;, &quot;stdout_lines&quot;: []}Apperently since version 4.3.0 of Docker Desktop they have switched to Cgroupv2. If the version of systemd in your containers is not 249 or above you will get the error above.The solution I found was adding the following to my settings.json file within ~/Library/Group Containers/group.com.docker/:&quot;deprecatedCgroupv1&quot;: trueAfter adding the above setting within the settings.json file and restarting Docker for Desktop on my Mac everything worked again.Solution found in:https://github.com/docker/for-mac/issues/6073" } ]
